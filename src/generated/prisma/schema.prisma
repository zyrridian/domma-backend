// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  // previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(uuid())
  email           String          @unique
  password_hash   String          @default("")
  full_name       String          @default("")
  phone           String?
  university      String?
  major           String?
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  transactions    Transaction[]
  financial_goals FinancialGoal[]
  budgets         Budget[]
  role            Role            @default(USER)
  payments        Payment[]
  tokens          Token[]
}

model Token {
  id         String   @id @default(uuid())
  token      String   @unique
  user_id    String
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  expires_at DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])
}

model Transaction {
  id                    String                @id @default(uuid())
  user_id               String
  user                  User                  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  type                  TransactionType
  amount                Decimal               @db.Decimal(12, 2)
  description           String
  category              String
  transaction_date      DateTime              @db.Date
  transaction_time      DateTime              @db.Time(0)
  payment_method        String
  notes                 String?
  created_at            DateTime              @default(now())
  updated_at            DateTime              @updatedAt
  recurring_transaction RecurringTransaction?
}

model RecurringTransaction {
  id             String             @id @default(uuid())
  transaction_id String             @unique
  transaction    Transaction        @relation(fields: [transaction_id], references: [id], onDelete: Cascade)
  frequency      RecurringFrequency
  end_type       EndType
  end_date       DateTime?          @db.Date
  occurrences    Int?
  created_at     DateTime           @default(now())
  updated_at     DateTime           @updatedAt
}

model FinancialGoal {
  id             String   @id @default(uuid())
  user_id        String
  user           User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  name           String
  target_amount  Decimal  @db.Decimal(12, 2)
  current_amount Decimal  @default("0") @db.Decimal(12, 2)
  deadline       DateTime @db.Date
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

model Category {
  id         String          @id @default(uuid())
  type       TransactionType
  name_en    String
  name_id    String
  created_at DateTime        @default(now())
  updated_at DateTime        @updatedAt
}

model Budget {
  id         String       @id @default(uuid())
  user_id    String
  user       User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  category   String
  amount     Decimal      @db.Decimal(12, 2)
  period     BudgetPeriod
  start_date DateTime     @db.Date
  end_date   DateTime     @db.Date
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
}

model Payment {
  id        String        @id @default(uuid())
  amount    Float
  status    PaymentStatus @default(PENDING)
  orderId   String        @unique
  snapToken String?
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  EXPIRED
}

enum TransactionType {
  income
  expense
}

enum RecurringFrequency {
  daily
  weekly
  monthly
  yearly
}

enum EndType {
  never
  on_date
  after_occurrences
}

enum BudgetPeriod {
  weekly
  monthly
  yearly
}
