// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  // previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String          @id @default(uuid())
  email               String          @unique
  role                Role            @default(USER)
  created_at          DateTime        @default(now())
  full_name           String          @default("")
  major               String?
  password_hash       String          @default("")
  phone               String?
  university          String?
  profile_picture_url String?
  updated_at          DateTime        @updatedAt
  budgets             Budget[]
  financial_goals     FinancialGoal[]
  payments            Payment[]
  tokens              Token[]
  transactions        Transaction[]
  badges              UserBadge[]
  UserChallenge       UserChallenge[]
}

model Token {
  id         String   @id @default(uuid())
  token      String   @unique
  user_id    String
  expires_at DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model Transaction {
  id                    String                @id @default(uuid())
  user_id               String
  type                  TransactionType
  amount                Decimal               @db.Decimal(12, 2)
  description           String
  category              String
  transaction_date      DateTime              @db.Date
  transaction_time      DateTime              @db.Time(0)
  payment_method        String
  notes                 String?
  created_at            DateTime              @default(now())
  updated_at            DateTime              @updatedAt
  recurring_transaction RecurringTransaction?
  user                  User                  @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model RecurringTransaction {
  id             String             @id @default(uuid())
  transaction_id String             @unique
  frequency      RecurringFrequency
  end_type       EndType
  end_date       DateTime?          @db.Date
  occurrences    Int?
  created_at     DateTime           @default(now())
  updated_at     DateTime           @updatedAt
  transaction    Transaction        @relation(fields: [transaction_id], references: [id], onDelete: Cascade)
}

model FinancialGoal {
  id             String   @id @default(uuid())
  user_id        String
  name           String
  target_amount  Decimal  @db.Decimal(12, 2)
  current_amount Decimal  @default(0) @db.Decimal(12, 2)
  deadline       DateTime @db.Date
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  user           User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Category {
  id         String          @id @default(uuid())
  type       TransactionType
  name_en    String
  name_id    String
  created_at DateTime        @default(now())
  updated_at DateTime        @updatedAt
}

model Budget {
  id         String   @id @default(uuid())
  user_id    String
  category   String
  amount     Decimal  @db.Decimal(12, 2)
  spent      Decimal  @default(0) @db.Decimal(12, 2)
  month_year String   @default("2023-01")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  notes      String?
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Payment {
  id        String        @id @default(uuid())
  amount    Float
  status    PaymentStatus @default(PENDING)
  orderId   String        @unique
  snapToken String?
  userId    String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id])
}

model Challenge {
  id                String              @id @default(uuid())
  title             String
  description       String
  total_days        Int
  target_amount     Decimal             @db.Decimal(12, 2)
  color             String
  difficulty        Int                 @default(1)
  type              ChallengeType
  targetText        String?
  features          String[]
  steps             String[]
  tips              String[]
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  UserChallenge     UserChallenge[]
  ChallengeActivity ChallengeActivity[]
}

model UserChallenge {
  id               String              @id @default(uuid())
  user_id          String
  challenge_id     String
  status           ChallengeStatus     @default(active)
  start_date       DateTime            @db.Date
  end_date         DateTime            @db.Date
  goal             String?
  current_day      Int                 @default(1)
  current_amount   Decimal             @default(0) @db.Decimal(12, 2)
  percent_complete Decimal             @default(0) @db.Decimal(5, 2)
  color            String              @default("green")
  created_at       DateTime            @default(now())
  updated_at       DateTime            @updatedAt
  user             User                @relation(fields: [user_id], references: [id], onDelete: Cascade)
  challenge        Challenge           @relation(fields: [challenge_id], references: [id], onDelete: Cascade)
  activities       ChallengeActivity[]
  notifications    Json?
}

model ChallengeActivity {
  id              String         @id @default(uuid())
  challenge_id    String
  action          String
  date            DateTime       @db.Date
  amount          Decimal?       @db.Decimal(12, 2)
  completed       Boolean        @default(true)
  difficulty      Int?
  notes           String?
  shared          Boolean        @default(false)
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
  challenge       Challenge      @relation(fields: [challenge_id], references: [id], onDelete: Cascade)
  UserChallenge   UserChallenge? @relation(fields: [userChallengeId], references: [id])
  userChallengeId String?
}

model ChallengeCatalog {
  id          String        @id @default(uuid())
  title       String
  description String
  features    String[]
  target_text String
  color       String
  duration    String
  difficulty  Int
  category    String
  type        ChallengeType
  steps       String[]
  tips        String[]
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
}

model ChallengeBadge {
  id          String      @id @default(uuid())
  name        String
  description String
  icon        String
  color       String
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  users       UserBadge[]
}

model UserBadge {
  id        String         @id @default(uuid())
  user_id   String
  badge_id  String
  earned_at DateTime       @default(now())
  user      User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  badge     ChallengeBadge @relation(fields: [badge_id], references: [id], onDelete: Cascade)

  @@unique([user_id, badge_id])
}

enum Role {
  USER
  ADMIN
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  EXPIRED
}

enum TransactionType {
  income
  expense
}

enum RecurringFrequency {
  daily
  weekly
  monthly
  yearly
}

enum EndType {
  never
  on_date
  after_occurrences
}

enum ChallengeStatus {
  active
  completed
  failed
}

enum ChallengeType {
  saving
  spending
  habit
}
